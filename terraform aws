
Basic ec2 creation :
---------------------
provider "aws" {
  region = "ap-south-1"
}

resource "aws_instance" "my_ec2_instance" {
  ami            = "ami-02b49a24cfb95941c"
  instance_type        = "t2.micro"
}


terraform aws documentation link:
----------------------------------
https://registry.terraform.io/providers/hashicorp/aws/latest/docs



availability zone link:
---------------------
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#available-availability-zones


example -1
----------
vars.tf
--------
variable REGION{
    default="ap-south-1"
}

variable AMI{
   default = "ami-02b49a24cfb95941c"
}



provider.tf
----------------
provider "aws" {
  region = var.REGION
}



instance.tf file
--------------
resource "aws_instance" "my_first_instance"{
    ami = var.AMI
    instance_type = "t2.micro"
    key_name = "EC2 Tutorial"

    tags = {
        Name = "my-ec2-instance"
    }
}



example-2
----------
new key creation.
----------------
ssh-keygen command-->it will ask about key name if you give it will generate one public key
for example:
-----------
private_key-->my-key
public_key-->my-key.pub

vars.tf
------
variable "REGION" {
  default = "ap-south-1"
}

variable "ZONE1" {
  default = "ap-south-1a"
}

variable "AMI" {
  default = "ami-02b49a24cfb95941c"
}

variable "USER" {
  default = "ec2-user"
}


providers.tf
--------------
provider "aws" {
  region = var.REGION
}


instance.tf
-------------
resource "aws_key_pair" "ec2-tutorial" {
  key_name   = "my-key"
  public_key = file("my-key.pub")

}

resource "aws_instance" "example" {
  ami               = var.AMI
  instance_type     = "t2.micro"
  availability_zone = var.ZONE1
  key_name          = "my-key"

  tags = {
    Name    = "new_instance"
    project = "New-Project"
  }

  provisioner "file" {
    source      = "web.sh"
    destination = "/home/bootlabs/rakesh/web.sh"
  }

  provisioner "remote-exec" {
    inline = [
      "chmod  u+x /home/bootlabs/rakesh/web.sh",
      "sudo /home/bootlabs/rakesh/web.sh"
    ]
  }

  connection {
    user        = var.USER
    private_key = file("my-key")
    host        = self.public_ip
  }

}


web.sh
------
#!/bin/bash
yum install wget unzip httpd -y 
systemctl start httpd
systemctl enable httpd
wget https://www.tooplate.com/zip-templates/2117_infinite_loop.zip
unzip -o 2117_infinite_loop.zip
cp -r 2117_infinite_loop.zip/* /var/www/html/
systemctl restart httpd   




creating vpc totally:
------------------------
public key-->my-key.pub
private key-->my-key


providers.tf
-----------
provider "aws" {
  region = var.REGION
}

vars.tf
----------
variable "REGION" {
  default = "ap-south-1"
}

variable "ZONE1" {
  default = "ap-south-1a"
}

variable "ZONE2" {
  default = "ap-south-1b"
}

variable "ZONE3" {
  default = "ap-south-1c"
}

variable "AMI" {
  default = "ami-02b49a24cfb95941c"
}

variable "USER" {
  default = "ec2-user"
}

variable "PUB_KEY" {
  default = "my-key.pub"
}

variable "PRIV_KEY" {
  default = "my-key"
}

vpc.tf
----------

vpc creation:
-----------
resource "aws_vpc" "my-vpc" {
  cidr_block           = "10.0.0.0/16"
  instance_tenancy     = "default"
  enable_dns_support   = "true"
  enable_dns_hostnames = "true"

  tags = {
    Name = "my_aws_vpc"
  }
}


public subnet1:
--------------
resource "aws_subnet" "my-key-pub1" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE1

  tags = {
    Name = "my-key-pub1"
  }
}


public subnet2:
--------------

resource "aws_subnet" "my-key-pub2" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE2

  tags = {
    Name = "my-key-pub2"
  }
}


public subnet3:
--------------
resource "aws_subnet" "my-key-pub3" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.3.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE3

  tags = {
    Name = "my-key-pub3"
  }
}

private subnet1:
----------------

resource "aws_subnet" "my-key-priv1" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.4.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE1

  tags = {
    Name = "my-key-priv1"
  }
}

private subnet2:
----------------

resource "aws_subnet" "my-key-priv2" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.5.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE2

  tags = {
    Name = "my-key-priv2"
  }
}

private subnet3:
----------------

resource "aws_subnet" "my-key-priv3" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.6.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE3

  tags = {
    Name = "my-key-priv3"
  }
}

internet gateway:
------------------

resource "aws_internet_gateway" "my-internet-gateway1" {
  vpc_id = aws_vpc.my-vpc.id
  tags = {
    Name = "my-internet-gateway1"
  }
}

route table:-->to get the internet from internet gateway to subnets
------------

resource "aws_route_table" "my-route-table" {
  vpc_id = aws_vpc.my-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my-internet-gateway1.id
  }

  tags = {
    Name = "my-route-table"
  }
}

aws route table association:
----------------------------
for public subenets:1,2,3
--------------------------

resource "aws_route_table_association" "my-key-pub1-a" {
  subnet_id      = aws_subnet.my-key-pub1.id
  route_table_id = aws_route_table.my-route-table.id
}

resource "aws_route_table_association" "my-key-pub2-a" {
  subnet_id      = aws_subnet.my-key-pub2.id
  route_table_id = aws_route_table.my-route-table.id
}

resource "aws_route_table_association" "my-key-pub3-a" {
  subnet_id      = aws_subnet.my-key-pub3.id
  route_table_id = aws_route_table.my-route-table.id
}


secgrp.tf
----------------

resource "aws_security_group" "my-security-group" {
  name        = "my-security-group"
  description = "Security group for my vpc"
  vpc_id      = aws_vpc.my-vpc.id

  tags = {
    Name = "my-security-group"
  }
}

resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
  security_group_id = aws_security_group.my-security-group.id
  cidr_ipv4         = aws_vpc.my-vpc.cidr_block
  from_port         = 443
  ip_protocol       = "tcp"
  to_port           = 443
}

resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
  security_group_id = aws_security_group.my-security-group.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}

backend.tf
------------

terraform {
  backend "s3" {
    bucket = "terra-state-aws-instance" # Ensure this is correct without extra spaces
    key    = "terraform/backend_exercise6"
    region = "ap-south-1"
  }
}

web.sh
---------
#!/bin/bash
yum install wget unzip httpd -y 
systemctl start httpd
systemctl enable httpd
wget https://www.tooplate.com/zip-templates/2117_infinite_loop.zip
unzip -o 2117_infinite_loop.zip
cp -r 2117_infinite_loop.zip/* /var/www/html/
systemctl restart httpd      

instance.tf
------------
resource "aws_key_pair" "ec2-tutorial" {
  key_name   = "my-key"
  public_key = file(var.PUB_KEY)

}

resource "aws_instance" "example" {
  ami                    = var.AMI
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.my-key-pub1.id
  availability_zone      = var.ZONE1
  key_name               = "my-key"
  vpc_security_group_ids = [aws_security_group.my-security-group.id]

  tags = {
    Name    = "new_instance"
    project = "New-Project"
  }
}

output "PublicIp" {
  value = aws_instance.example.public_ip
}



ebs.tf
-----------
resource "aws_ebs_volume" "my-ebs-volume" {
  availability_zone = var.ZONE1
  size              = 3

  tags = {
    Name = "my-ebs-volume"
  }
}

resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volume_id   = aws_ebs_volume.my-ebs-volume.id
  instance_id = aws_instance.example.id
}




example project
----------------

link:-->https://github.com/hkhcoder/vprofile-project/tree/terraform-eks



